/**
 * This code was auto-generated by a tool, every time
 * the tool executes this code will be reset.
 **/

using System;
namespace Quantum.Prototypes.Unity {
  [System.Serializable]
  public class MapNode_Prototype : Quantum.IPrototypeAdapter<Quantum.Prototypes.MapNode_Prototype> {
    public Quantum.AssetRefMapNodeSpec Spec;
    [Quantum.Core.FixedArrayAttribute((Int32)2)]
    [Quantum.LocalReference]
    public global::EntityPrototype[] NextNodes = new global::EntityPrototype[2];
    public Quantum.QBoolean Occupied;

    public Quantum.Prototypes.MapNode_Prototype Convert(EntityPrototypeConverter converter) {
      var result = new Quantum.Prototypes.MapNode_Prototype();
      result.Spec = this.Spec;
      result.NextNodes = System.Array.ConvertAll(this.NextNodes, x => { converter.Convert(x, out Quantum.MapEntityId tmp); return tmp; });
      result.Occupied = this.Occupied;
      return result;
    }
  }
  [System.Serializable]
  public class PlayerLink_Prototype : Quantum.IPrototypeAdapter<Quantum.Prototypes.PlayerLink_Prototype> {
    public Quantum.PlayerRef PlayerRef;
    [Quantum.LocalReference]
    public global::EntityPrototype TargetMapNode;

    public Quantum.Prototypes.PlayerLink_Prototype Convert(EntityPrototypeConverter converter) {
      var result = new Quantum.Prototypes.PlayerLink_Prototype();
      result.PlayerRef = this.PlayerRef;
      converter.Convert(this.TargetMapNode, out result.TargetMapNode);
      return result;
    }
  }

}
